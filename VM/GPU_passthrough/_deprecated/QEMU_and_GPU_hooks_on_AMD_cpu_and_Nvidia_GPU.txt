Alternative guides:  
https://www.heiko-sieger.info/running-windows-10-on-linux-using-kvm-with-vga-passthrough/
https://forums.linuxmint.com/viewtopic.php?f=231&t=212692


terminal commands:
checking IOMMU:    dmesg | grep AMD-Vi
finding PCI bus id:    lspci | grep VGA  # change the grep to the start of the found number to list the audio GPU device
list iommu sorted (or use the script seen below):    for a in /sys/kernel/iommu_groups/*; do find $a -type l; done
list USB devices:    lsusb

files:
/etc/default/grub   - configuring iommu and vfio on next boot



GPU hooks for QEMU instructions: ( used this guide alongside other sources: https://gitlab.com/risingprismtv/single-gpu-passthrough/-/wikis/1)-Preparations   ;  more info on hooks:  https://www.gnu.org/software/guile/docs/master/guile.html/VM-Hooks.html )
    The following applies for an AMD CPU; Make sure in BIOS that:         [can be automated to a few commands and an if statement that quits]
        CSM (Boot) is disabled (so UEFI mode is used)
        IOMMU (CPU) is enabled
        NX (CPU) is enabled
        SVM (CPU) is enabled
    Edit grub:  sudo nano /etc/default/grub
        add the following arguments into GRUB_CMDLINE_LINUX_DEFAULT: "amd_iommu=on iommu=pt video=efifb:off"             [can be automated with a 'sed' command]
            Should end up looking like this for AMD GPU:   GRUB_CMDLINE_LINUX_DEFAULT="quiet splash amd_iommu=on iommu=pt video=efifb:off"
            Should end up looking like this for Nvidia GPU:    GRUB_CMDLINE_LINUX_DEFAULT="quiet splash amd_iommu=on iommu=pt nomodeset"
        run "sudo update-grub" to apply the changes
        reboot
    Check that the IOMMU groups are valid by running and take note of the number of every GPU group:  (I saved the script into bashrc as function "print_iommu_groups")       [can be automated with a 'sed' command]
        #!/bin/bash
        shopt -s nullglob
        for g in /sys/kernel/iommu_groups/*; do
            echo "IOMMU Group ${g##*/}:"
            for d in $g/devices/*; do
                echo -e "\t$(lspci -nns ${d##*/})"
            done;
        done;
    install Libvirt and qemu:
        sudo apt update && sudo apt install qemu-kvm qemu libvirt-clients libvirt-daemon-system bridge-utils virt-manager ovmf -y
        edit libvirtd.conf:  sudo nano /etc/libvirt/libvirtd.conf
            uncomment:          [can be automated with a 'sed' command]
                unix_sock_group = "libvirt"       (for me it's in line 81)
                unix_sock_rw_perms = "0770"       (for me it's in line 104)
            append to the end of the file:          [can be automated with a >> stream into file]
                log_filters="1:qemu"
                log_outputs="1:file:/var/log/libvirt/libvirtd.log"
        assign yourself to the libvirt group:  sudo usermod -a -G kvm,libvirt $(whoami)          [can be checked with "sudo groups $(whoami)" and quit if the group isn't there]
        start libvirtd in systemctl:
            sudo systemctl start libvirtd
            sudo systemctl enable libvirtd
        edit qemu.conf:  sudo nano /etc/libvirt/qemu.conf
            change '#user = "root"' to 'user = "your-username"'    (ignore the single quotes, but the double quotes are important)         [can be automated with sed, and the whoami command]
            change '#group = "root"' to 'group = "your-username"'    (ignore the single quotes, but the double quotes are important)         [can be automated with sed, and the whoami command]
        restart libvirt:   sudo systemctl restart libvirtd
            (I'd recommend also running "sudo systemctl status libvirtd" to check on it)
        configure virsh internal network to run automatically on startup:  "sudo virsh net-autostart default"
    Configure VM Manager to run Win10:
        install (or not, in most distros. just downloading is fine?) virtio-win drivers:  wget https://fedorapeople.org/groups/virt/virtio-win/virtio-win.repo -O /etc/yum.repos.d/virtio-win.repo
            Download ISO from here: https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md
            Store it somewhere (remember where, for later)
        Open Virtual Machine Manager
        Edit > Preferences > General -> check "Enable XML editing"
        Start creating a new VM
            Give it an ISO (from Microsoft's site)
            Give it about half your RAM and CPU cores.
            When configuring storage, unless you want it to write locally, browse for your desired partition by clicking the + on the bottom-left
                After that, choose your added partition and create a qcow volume with the desired volume
            Important: on step 5 of 5, check "Customize configuration before install"
        At the screen before installation:
            Overview -> XML:
                delete these 2 lines:    <timer name="rtc" tickpolicy="catchup"/>  ,  <timer name="pit" tickpolicy="delay"/>
                change the nearby "hpet" present value to "yes"
            Overview: make sure Chipset is Q35 , and make sure Firmware is UEFI or some other UEFI option like: "/usr/share/OVMF/OVMF_CODE_4M.fd" (I'm very unsure if either works; picked "UEFI")
            CPUs: Check both boxes and set sockets=1 (unless you have more than 1 seated CPU), cores=[num-of-your-cpu's-cores], threads=[threads-per-core,probably 2]
            Disk: Set Disk bus to VirtIO , Cache mode: writeback
            Add Hardware -> 
                change to CD-ROM and confirm 
                Configure the new hardware SATA CDROM to point to the downloaded VirtIO ISO
            Boot Options: check both SATA CDROM (Windows ISO and VirtIO ISO). Of course VirtIO disk still needs to be checked too.
            NIC (network): change device model to "virtio". Network source should be set to "Virtual network 'default':NAT"
            Install Windows:
                (if you need to leave the VM window press the left CTRL+ALT)
                If prompted to press anything to load from media drives, press something
                Custom install
                When choosing disks click Load Driver > choose the one that fits you
                The Virtio disk you created earlier would be visible with the same amount of available space. Choose it and finish the installation
                To grant internet access (if missing), inside the VM go to Device Manage:
                    find Ethernet Controller (if you only find "RedHat", delete it, it'll take its place)
                    Right click > Update Driver > Browse Computer -> give it the virtio "disc" dir / NetKVM / w10 / {your cpu architecture}
            Dump and prepare ROM file for Nvidia:
                CANCELLED, got an error: download nvidia nvflash:  https://www.techpowerup.com/download/nvidia-nvflash/
                Download a fitting ROM online, from: https://www.techpowerup.com/vgabios/
                edit the file with hex editor (I found one online: https://hexed.it/ )
                    Find the string "video". You'll see that the same row starts with 'U'
                    Mark and remove the whole chunk above that line - all lines until the first upper-left "00" (including)
                Save the edited file:
                    rom_filename="RTX3090_edited.rom"
                    sudo mkdir /usr/share/vgabios
                    sudo mv "$rom_filename" /usr/share/vgabios/
                    sudo chmod 660 "/usr/share/vgabios/$rom_filename"
                    sudo chown $(whoami):$(whoami) "/usr/share/vgabios/$rom_filename"
            Scripts and logfiles:
                download a specific scripts repository:
                    wget https://gitlab.com/risingprismtv/single-gpu-passthrough/-/archive/master/single-gpu-passthrough-master.tar.gz  # this repository has a discord link for help
                    tar xvzf "single-gpu-passthrough-master.tar.gz"
                    cd single-gpu-passthrough-master
                    sudo cp -r hooks/ /etc/libvirt/
                    sudo ./install_hooks.sh
                VM Devices changes:
                    Add 2 more hardwares of type "PCI Host Device" to your VM. GPU video and GPU audio
                        to the video one(or both?), add to the XML the tag: <rom file="/usr/share/vgabios/<romfilename>"/> (example: <rom file="/usr/share/vgabios/RTX3090_edited.rom"/> ). You can put it below </source>
                    Add 2 USB devices: Mouse and Keyboard
                    Remove VM devices "Display Spice", "Video QXL"  (and "Channel spice"?)
                VM XML change:
                    edit the XML of your VM (has to be called "win10") either by running " sudo virsh edit win10" or by editing it in Virtual Machine Manager > (instance) > Overview > XML tab
                    the xml has to have the following line sequence:
                         </os>
                          <features>
                            <acpi/>
                            <apic/>
                            <hyperv>
                              <relaxed state="on"/>
                              <vapic state="on"/>
                              <spinlocks state="on" retries="8191"/>
                              <vendor_id state="on" value="123456789123"/>
                            </hyperv>
                            <kvm>
                              <hidden state="on"/>
                            </kvm>
                            <vmport state="off"/>
                            <ioapic driver="kvm"/>
                    
                    the xml has to have the following line sequence (for AMD CPU) (no need to overwrite topology line):
                        </features>
                          <cpu mode='host-passthrough' check='none'>
                            <topology sockets='1' cores='6' threads='2'/>
                            <feature policy='require' name='topoext'/>
                          </cpu>

                    the xml has to have the following line (allowing to make snapshots edit):  (I don't have either of them, don't know where to put them)
                        <loader readonly='yes' type='rom'>/usr/share/edk2-ovmf/x64/OVMF_CODE.fd</loader>
                        instead of: <loader readonly='yes' type='pflash'>/usr/share/edk2/ovmf/OVMF_CODE.fd</loader>

